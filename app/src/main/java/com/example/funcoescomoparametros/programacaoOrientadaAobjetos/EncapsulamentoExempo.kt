package com.example.funcoescomoparametros.programacaoOrientadaAobjetos

//Encapsulamento
//Atributos _senha e _mensagens s√£o privados (protegidos).
//M√©todos p√∫blicos (desbloquear(), adicionarMensagem()) controlam o acesso.

// ========== CLASSE PRINCIPAL ==========
// ENCAPSULAMENTO: Protege os dados internos do objeto
class Celular(private val dono: String) {  // 'dono' √© privado (s√≥ acess√≠vel dentro da classe)

    // --- ATRIBUTOS PRIVADOS ---
    // POO: Encapsulamento = esconder o estado interno
    private var _senha: String = "1234"  // Atributo privado (n√£o pode ser acessado fora da classe)
    private var _mensagens = mutableListOf("Oi!")  // Hist√≥rico oculto

    // --- M√âTODOS P√öBLICOS (interface controlada) ---
    // POO: Comportamentos expostos de forma segura
    fun desbloquear(senhaDigitada: String): Boolean {
        if (senhaDigitada == _senha) {
            println("Celular desbloqueado para $dono!")  // Sa√≠da (sout)
            return true
        }
        println("Senha incorreta!")  // Sa√≠da (sout)
        return false
    }

    fun adicionarMensagem(mensagem: String) {
        _mensagens.add(mensagem)
        println("Mensagem adicionada.")  // Sa√≠da (sout)
    }

    // --- GETTER SEGURO ---
    // POO: Exp√µe dados sem permitir modifica√ß√£o direta
    val mensagens: List<String>
        get() = _mensagens.toList()  // Retorna c√≥pia (imut√°vel)

    // --- SETTER CONTROLADO ---
    // POO: Valida√ß√£o antes de modificar um atributo privado
    fun alterarSenha(novaSenha: String, senhaAntiga: String) {
        if (senhaAntiga == _senha) {
            _senha = novaSenha
            println("Senha alterada com sucesso!")  // Sa√≠da (sout)
        } else {
            println("Senha antiga incorreta!")  // Sa√≠da (sout)
        }
    }
}

// ========== PROGRAMA PRINCIPAL ==========
fun main() {
    // Criando um objeto Celular
    val meuCelular = Celular("Ana")

    // --- INTERA√á√ÉO SEGURA (via m√©todos p√∫blicos) ---
    // POO: O usu√°rio n√£o acessa os atributos diretamente
    meuCelular.desbloquear("1111")  // Sa√≠da: "Senha incorreta!"
    meuCelular.desbloquear("1234")  // Sa√≠da: "Celular desbloqueado para Ana!"

    meuCelular.adicionarMensagem("Tudo bem?")  // Sa√≠da: "Mensagem adicionada."

    // --- TENTATIVA DE ACESSO ILEGAL (comentada) ---
    // meuCelular._senha = "0000"  // ERRO! Atributo privado
    // println(meuCelular._mensagens)  // ERRO! Atributo privado

    // --- ACESSO VIA GETTER ---
    println("Mensagens: ${meuCelular.mensagens}")  // Sa√≠da: Mensagens: [Oi!, Tudo bem?]

    // --- ALTERA√á√ÉO CONTROLADA ---
    meuCelular.alterarSenha("4321", "1234")  // Sa√≠da: "Senha alterada com sucesso!"
}

//Coment√°rios sobre POO no C√≥digo
//
//Encapsulamento
//
//Atributos _senha e _mensagens s√£o privados (protegidos).
//
//M√©todos p√∫blicos (desbloquear(), adicionarMensagem()) controlam o acesso.
//
//Abstra√ß√£o
//
//O usu√°rio n√£o precisa saber como as mensagens s√£o armazenadas ou como a senha √© validada.
//
//Getters/Setters
//
//mensagens exp√µe uma c√≥pia imut√°vel da lista (seguran√ßa).
//
//alterarSenha() valida a senha antiga antes de modificar.
//
//Vantagens
//
//Seguran√ßa: Ningu√©m pode alterar a senha sem valida√ß√£o.
//
//Controle: Mensagens s√≥ s√£o adicionadas via m√©todo dedicado.
//
//Manuten√ß√£o: Se a l√≥gica interna mudar, o c√≥digo que usa a classe n√£o quebra.
//
//Como Estender para Outros Pilares
//
//Heran√ßa: Criar class CelularPremium : Celular() com recursos extras.
//
//Polimorfismo: Usar Celular como tipo gen√©rico em fun√ß√µes.
//
//Pronto! Esse √© um exemplo pr√°tico de encapsulamento em Kotlin com foco em POO. üõ°Ô∏èüì±