package com.example.funcoescomoparametros.programacaoOrientadaAobjetos

// ===== CLASSE PAI (Superclasse) =====
// POO: Abstra√ß√£o - Define atributos/comportamentos comuns a todos os ve√≠culos
open class Veiculo(
    protected val marca: String,  // 'protected': vis√≠vel apenas para a classe e subclasses
    private val ano: Int          // 'private': vis√≠vel apenas nesta classe
) {
    // M√©todo comum a todos os ve√≠culos
    open fun acelerar() {  // 'open': permite sobrescrita (override)
        println("$marca acelerando...")
    }

    // M√©todo final (n√£o pode ser sobrescrito)
    fun mostrarAno() {
        println("Ano do ve√≠culo: $ano")
    }
}

// ===== SUBCLASSES (Heran√ßa) =====
// POO: Heran√ßa - Carro herda atributos/comportamentos de Veiculo
class Carro(
    marca: String,
    ano: Int,
    private val portas: Int  // Atributo espec√≠fico de Carro
) : Veiculo(marca, ano) {    // Sintaxe de heran√ßa (: Veiculo)

    // POO: Polimorfismo - Sobrescrita do m√©todo acelerar()
    override fun acelerar() {
        println("$marca (carro) acelerando com $portas portas abertas!")
    }

    // M√©todo espec√≠fico de Carro
    fun abrirPortas() {
        println("Abrindo $portas portas...")
    }
}

// Outra subclasse
class Moto(
    marca: String,
    ano: Int,
    private val cilindradas: Int
) : Veiculo(marca, ano) {

    override fun acelerar() {
        println("$marca (moto) acelerando com $cilindradas cilindradas! VRUUUM!")
    }

    fun empinar() {
        println("Empinando a moto $marca!")
    }
}

// ===== PROGRAMA PRINCIPAL =====
fun main() {
    // Instanciando objetos
    val veiculoGenerico = Veiculo("Gen√©rico", 2020)
    val meuCarro = Carro("Ford", 2022, 4)
    val minhaMoto = Moto("Honda", 2023, 300)

    // === TESTANDO HERAN√áA ===
    println("=== SA√çDAS ===")

    // Chamadas de m√©todos (comportamentos diferentes)
    veiculoGenerico.acelerar()  // Sa√≠da: "Gen√©rico acelerando..."
    meuCarro.acelerar()         // Sa√≠da: "Ford (carro) acelerando com 4 portas abertas!"
    minhaMoto.acelerar()        // Sa√≠da: "Honda (moto) acelerando com 300 cilindradas! VRUUUM!"

    // M√©todo herdado (n√£o sobrescrito)
    meuCarro.mostrarAno()  // Sa√≠da: "Ano do ve√≠culo: 2022"

    // === TESTANDO M√âTODOS ESPEC√çFICOS ===
    meuCarro.abrirPortas()  // Sa√≠da: "Abrindo 4 portas..."
    minhaMoto.empinar()     // Sa√≠da: "Empinando a moto Honda!"

    // === POLIMORFISMO EM A√á√ÉO ===
    val veiculos: List<Veiculo> = listOf(veiculoGenerico, meuCarro, minhaMoto)
    println("\n=== ACELERANDO TODOS OS VE√çCULOS ===")
    for (v in veiculos) {
        v.acelerar()  // Chama a implementa√ß√£o espec√≠fica de cada subclasse
    }
}

//Coment√°rios sobre POO no C√≥digo
//
//Heran√ßa
//
//Carro e Moto herdam de Veiculo (: Veiculo).
//
//Subclasses acessam atributos protected da superclasse (marca).
//
//Polimorfismo
//
//M√©todo acelerar() tem comportamentos diferentes em cada subclasse (override).
//
//Na lista veiculos, cada objeto executa sua pr√≥pria vers√£o do m√©todo.
//
//Encapsulamento
//
//ano √© privado (s√≥ Veiculo pode acess√°-lo).
//
//marca √© protegido (acess√≠vel apenas para subclasses).
//
//Abstra√ß√£o
//
//Veiculo define comportamentos gen√©ricos que as subclasses implementam.
//
//Benef√≠cios Deste Design
//
//Re√∫so de c√≥digo: Carro e Moto compartilham atributos/m√©todos de Veiculo.
//
//Extensibilidade: Adicionar novos ve√≠culos (ex: Caminhao) √© f√°cil.
//
//Flexibilidade: Tratar diferentes ve√≠culos como um tipo gen√©rico (Veiculo).
//
//Pronto! Isso √© heran√ßa na pr√°tica, integrada com outros pilares da POO. üöóüèçÔ∏è